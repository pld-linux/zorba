--- zorba-3.1/src/zorbatypes/collation_manager.h.orig	2015-06-16 13:26:38.000000000 +0200
+++ zorba-3.1/src/zorbatypes/collation_manager.h	2023-09-02 19:06:54.653539842 +0200
@@ -22,6 +22,10 @@
 #include <string>
 #include <map>
 
+#ifndef ZORBA_NO_ICU
+#include <unicode/coll.h>
+#endif
+
 namespace zorba
 {
 
@@ -31,6 +35,11 @@ class Collator
 {
 };
 
+#else
+
+using CollationKey = ::icu::CollationKey;
+using Collator = ::icu::Collator;
+
 #endif /* ZORBA_NO_ICU */
 
 class XQPCollator
--- zorba-3.1/src/runtime/full_text/icu_tokenizer.h.orig	2015-06-16 13:26:38.000000000 +0200
+++ zorba-3.1/src/runtime/full_text/icu_tokenizer.h	2023-09-02 20:09:00.490021920 +0200
@@ -52,7 +52,7 @@ public:
                         Callback&, Item const* );
 
 private:
-  typedef std::unique_ptr<RuleBasedBreakIterator> rbbi_ptr;
+  typedef std::unique_ptr<icu::RuleBasedBreakIterator> rbbi_ptr;
 
   locale::iso639_1::type const lang_;
   rbbi_ptr word_it_;
--- zorba-3.1/src/util/unicode_util.cpp.orig	2015-06-16 13:26:38.000000000 +0200
+++ zorba-3.1/src/util/unicode_util.cpp	2023-09-02 20:14:55.391432587 +0200
@@ -2244,7 +2244,7 @@ bool normalize( string const &in, normal
     default                 : icu_mode = UNORM_NONE; break;
   }
   Normalizer::normalize( in, icu_mode, 0, *out, status );
-  return U_SUCCESS( status ) == TRUE;
+  return U_SUCCESS( status ) == true;
 }
 
 bool strip_diacritics( string const &in, string *out ) {
@@ -2266,7 +2266,7 @@ bool to_char( char const *in, char_type
     u_strFromUTF8WithSub(
       out, 1, nullptr, in, utf8::char_length( *in ), SubChar, nullptr, &status
     );
-    return U_SUCCESS( status ) == TRUE;
+    return U_SUCCESS( status ) == true;
   }
   catch ( utf8::invalid_byte const& ) {
     return false;
@@ -2312,7 +2312,7 @@ bool to_string( char const *in, size_typ
   UErrorCode status = U_ZERO_ERROR;
   u_strFromUTF8( buf, in_len + 1, &buf_len, in, in_len, &status );
   out->releaseBuffer( buf_len );
-  return U_SUCCESS( status ) == TRUE;
+  return U_SUCCESS( status ) == true;
 }
 
 bool to_string( wchar_t const *in, size_type in_len, string *out ) {
@@ -2321,7 +2321,7 @@ bool to_string( wchar_t const *in, size_
   size_type buf_len;
   u_strFromWCS( buf, in_len + 1, &buf_len, in, in_len, &status );
   out->releaseBuffer( buf_len );
-  return U_SUCCESS( status ) == TRUE;
+  return U_SUCCESS( status ) == true;
 }
 
 #endif /* ZORBA_NO_ICU */
--- zorba-3.1/src/util/icu_regex.cpp.orig	2015-06-16 13:26:38.000000000 +0200
+++ zorba-3.1/src/util/icu_regex.cpp	2023-09-02 20:15:43.874503265 +0200
@@ -759,7 +759,7 @@ bool regex::replace_all( string const &i
   matcher_->reset( in );
   UErrorCode status = U_ZERO_ERROR;
   *out = matcher_->replaceAll( replacement, status );
-  return U_SUCCESS( status ) == TRUE;
+  return U_SUCCESS( status ) == true;
 }
 
 bool regex::replace_all( char const *in, char const *replacement,
--- zorba-3.1/src/zorbatypes/collation_manager.cpp.orig	2015-06-16 13:26:38.000000000 +0200
+++ zorba-3.1/src/zorbatypes/collation_manager.cpp	2023-09-02 20:19:44.139868303 +0200
@@ -119,11 +119,11 @@ CollationFactory::createCollator(const s
   UErrorCode lError = U_ZERO_ERROR;
   if (lTokens.size() == 2) 
   {
-    lCollator = Collator::createInstance(Locale(lTokens[1].c_str()), lError);
+    lCollator = Collator::createInstance(icu::Locale(lTokens[1].c_str()), lError);
   }
   else 
   {
-    lCollator = Collator::createInstance(Locale(lTokens[1].c_str(),
+    lCollator = Collator::createInstance(icu::Locale(lTokens[1].c_str(),
                                                 lTokens[2].c_str()),
                                          lError);
   }
@@ -182,7 +182,7 @@ CollationFactory::createCollator()
   Collator* lCollator;
 #ifndef ZORBA_NO_ICU
   UErrorCode lError = U_ZERO_ERROR;
-  lCollator = Collator::createInstance(Locale("en", "US"), lError); 
+  lCollator = Collator::createInstance(icu::Locale("en", "US"), lError); 
   if( U_FAILURE(lError) ) {
     assert(false);
   }
